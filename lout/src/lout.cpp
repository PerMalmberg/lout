//
// Created by Per Malmberg on 2016-05-21.
//

#include <lout.h>
#include <c++/iostream>

namespace lout {

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Lout::Lout()
		: myCurrentLevel( 0, "NoLevel" ), myActiveTags()
{

}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Lout::~Lout()
{
	RemoveAllOutputs();
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void Lout::SetLevel(const loglevel::ILogLevel& newLevel)
{
	myCurrentLevel = newLevel;
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void Lout::ActivateTag(const std::string& tag)
{
	myActiveTags.emplace( tag );
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void Lout::AddOutput(std::shared_ptr<output::ILoutOutput> output)
{
	if( output )
	{
		myOutput.push_back( std::move( output ) );
	}
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void Lout::RemoveAllOutputs()
{
	FlushAll();
	myOutput.erase( myOutput.begin(), myOutput.end() );
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void Lout::Log(const loglevel::ILogLevel& level, const std::string& msg)
{
	if( IsLevelActive( level ) )
	{
		for( auto& p : myOutput )
		{
			try
			{
				p.get()->Log( level, msg );
			}
			catch( std::exception& e )
			{
				std::cerr << e.what() << std::endl;
			}
			catch( ... )
			{
				std::cerr << "Unknown error while logging" << std::endl;
			}
		}
	}
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void Lout::LogWithTag(const loglevel::ILogLevel& level, const std::string& tag, const std::string& msg)
{
	if( IsLevelActive( level ) && myActiveTags.find( tag ) != myActiveTags.end() )
	{
		for( auto& p : myOutput )
		{
			try
			{
				p.get()->LogWithTag( level, tag, msg );
			}
			catch( std::exception& e )
			{
				std::cerr << e.what() << std::endl;
			}
			catch( ... )
			{
				std::cerr << "Unknown error while logging" << std::endl;
			}
		}
	}
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void Lout::FlushAll()
{
	for( auto& p : myOutput )
	{
		try
		{
			(*p).Flush();
		}
		catch( std::exception& e )
		{
			std::cerr << e.what() << std::endl;
		}
		catch( ... )
		{
			std::cerr << "Unknown error while flushing" << std::endl;
		}
	}
}

} // END namespace lout